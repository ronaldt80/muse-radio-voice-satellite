substitutions:
  name: raspiaudio-radio
  friendly_name: Raspiaudio Radio

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.9.1
  platformio_options:
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
  on_boot:
    priority: -100.0
    then:
      - output.turn_off: dac_mute
      - light.turn_on:
          id: screen_backlight
          brightness: 100%
      - lambda: |-
              id(lightTO) = 0;
              id(phase) = 0;
      - media_player.volume_set: 
              id: radio_media_player        
              volume: !lambda return id(Vol);                 
      - script.execute: reset_display

psram:
  mode: octal
  speed: 80MHz          
    
external_components:
  - source: github://RASPIAUDIO/esphomeRadio@main
    components: [es8388]
    refresh: 0s
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: dev-next
    components: [ adf_pipeline, i2s_audio ]
    refresh: 0s  
        
esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf
    version: 4.4.8
    platform_version: 5.4.0
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
      CONFIG_ESP32_S3_BOX_3_BOARD: "y"
    components:
      - name: esp32_s3_box_3_board
        source: github://jesserockz/esp32-s3-box-3-board@main
        refresh: 0s
   
micro_wake_word:
  id: mww
  models:
    - model: okay_nabu
#      id: okat_nabu
    - model: hey_jarvis
#      id: hey_jarvis
    - model: hey_mycroft
#      id: hey_mycroft
    - model: alexa
#      id: alexa  
  vad:
  
#  microphone: raspiaudio_microphone
  on_wake_word_detected:  
    - voice_assistant.start:
        wake_word: !lambda return wake_word;            
          
ota:
  platform: esphome
  
api:
# on_client_connected:
#    - script.execute: reset_display
#  on_client_disconnected:
#    - script.execute: reset_display

wifi:
  ap:
     ssid: "Raspiaudio-radio"
     password: "12345678"

captive_portal:
                
logger:
   level: DEBUG

##########
# Codec Configuration
es8388:
  id: my_es8388
 
#######
# Buses Configuration

i2c:
  sda: GPIO18
  scl: GPIO11
  id: bus_a

spi:
  - id: spi_bus0
    clk_pin: GPIO12
    mosi_pin: GPIO8
    # miso_pin: GPIOXX
    interface: hardware

#####################
# Internal Components
output:
  - platform: gpio
    id: dac_mute
    pin:
      number: GPIO46
      inverted: true
      mode:
        output: true
      ignore_strapping_warning: true       
       
  - platform: ledc
    pin:
      number: GPIO41
      mode:
        output: true
    id: screen_backlight_pin
    
light:
  - platform: monochromatic
    output: screen_backlight_pin
    id: screen_backlight
    name: Screen Backlight
    restore_mode: ALWAYS_ON
          
globals:
  - id: lightTO
    type: int
    initial_value: '0'
  - id: Vol
    type: float
    initial_value: '0.4'    
  - id: phase
    type: int
    initial_value: '0'
  - id: media_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: mute  
    type: bool
    initial_value: 'false'
    
            
interval:
  - interval: 1sec
    then:
      - if:
          condition:  
            and:
              - light.is_on: screen_backlight
              - lambda: 'return id(lightTO) < 60;'              
          then:
            - lambda: |-
                id(lightTO)++;
          else:
            - lambda: |-
                id(lightTO) = 0;
            - light.turn_off: screen_backlight               
                 
image:
  - file: "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/Raspiaudio.png"
    id: raspiIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/WFWW.png" 
    id: WFWWIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/W.png" 
    id: WIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/LISTEN.png" 
    id: LIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/ANSWER.png" 
    id: AIm
    resize: 320x240
    type: RGB24    
       
font:
  - file:
      type: gfonts
      family: Figtree
      weight: 300
      italic: true
    id: font_request
    size: 15 
  - file:
      type: gfonts
      family: Figtree
      weight: 300
    id: font_response
    size: 15 
            
display:
  - id: myDisplay
    platform: ili9xxx
    model: ST7789V
    cs_pin: GPIO40
    dc_pin: GPIO39
    reset_pin: GPIO9
    invert_colors: true
    rotation: 90   
    update_interval: never
    auto_clear_enabled: false
    pages:
        - id: logoP
          lambda: |-
            it.image(0, 0, id(raspiIm));        
        - id: waitingP
          lambda: |-
            it.image(0, 0, id(WFWWIm));        
        - id: waitingBP
          lambda: |-
            it.image(0, 0, id(WIm));        
        - id: listeningP
          lambda: |-
              it.image(0, 0, id(LIm));            
        - id: answeringP
          lambda: |-
              it.image(0, 0, id(AIm));    
              it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
              it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
              it.rectangle(20 , 190 , 280 , 30 , Color::BLACK );
              it.printf(30, 195, id(font_response), Color::BLACK, "%s", id(text_response).state.c_str());

# Home Assistant Components            
sensor:
  - platform: rotary_encoder
    name: "Volume"
    id: volume_encoder
    pin_a:
      number: GPIO42
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO3
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      then:
        - light.turn_on: screen_backlight      
        - lambda: |-
                id(lightTO) = 0;       
                id(Vol) -= 0.02;
                if(id(Vol) < 0) id(Vol) = 0;   
#                id(my_es8388).set_volume(id(Vol));         
        - media_player.volume_set: 
                id: radio_media_player
                volume: !lambda return id(Vol);
    on_clockwise:
      then:
        - light.turn_on: screen_backlight
        - lambda: |-
                id(lightTO) = 0;        
                id(Vol) += 0.02;
                if(id(Vol) > 1) id(Vol) = 1;   
#                id(my_es8388).set_volume(id(Vol));          
        - media_player.volume_set: 
                id: radio_media_player        
                volume: !lambda return id(Vol);                
                
  - platform: rotary_encoder
    name: "Function"
    id: function_encoder
    pin_a:
      number: GPIO7
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO6
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      then:
        - light.turn_on: screen_backlight      
        - lambda: |-
                id(lightTO) = 0;       
    on_clockwise:
      then:
        - light.turn_on: screen_backlight
        - lambda: |-
                id(lightTO) = 0;    
                
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO48
      inverted: true
      mode:
        input: true
        pullup: true
    id: click_vol
    name: Volume Button
    disabled_by_default: true
    on_click:
      then:
        - if:
            condition: 
               lambda: 'return (id(mute));' 
            then: 
               - media_player.volume_set: 
                   volume: !lambda return(id(Vol));
               - lambda: id(mute) = false;
            else:
               - media_player.volume_set: 
                   volume: '0'
               - lambda: id(mute) = true;  
          
          
              
        
  - platform: gpio
    pin:
      number: GPIO45
      inverted: true
      mode:
        input: true
        pullup: true
    id: click_sta
    name: Volume Button
    disabled_by_default: true

   
                                                
text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>40) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),39);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }
     
i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin: GPIO5
    i2s_mclk_pin: GPIO0
    access_mode: duplex 
 
microphone:
  - platform: adf_pipeline
    id: radio_mic
    keep_pipeline_alive: true
    pipeline:
      - adf_i2s_in
      - resampler
      - self 
adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_shared
    i2s_dout_pin: GPIO17
    sample_rate: 24000
    bits_per_sample: 16bit
    fixed_settings: false
#    fixed_settings: true
    
  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    pdm: false
    i2s_audio_id: i2s_shared
    i2s_din_pin: GPIO4
    sample_rate: 16000 
    fixed_settings: true     
    
media_player:
  - platform: adf_pipeline
    id: radio_media_player
    name: radio_media_player
    internal: false
    keep_pipeline_alive: true

    announcement_audio:
      sample_rate: 16000
      bits_per_sample: 16
      num_channels: 1
    pipeline:
      - self
      - resampler
      - adf_i2s_out
    on_play: 
      - lambda: |-
          id(media_state) = true;
          if(id(phase) == 1){id(myDisplay).show_page(waitingBP);id(myDisplay).update();}
          id(lightTO) = 0;          
      - micro_wake_word.stop:

    on_idle:
      - lambda: id(media_state) = false;
      - if:
          condition:
              lambda: 'return(id(phase) == 4);'
          then:
            - lambda: |-
                 id(phase) = 1;                     
            - script.execute: reset_display      
    
      - lambda: |-
          id(media_state) = false;
          if(id(phase) == 4) id(phase) = 1;
      - script.execute: reset_display                 
                  
voice_assistant:
  id: va
  microphone: radio_mic
  media_player: radio_media_player
  use_wake_word: false    
  on_listening:
    - logger.log: "listening 3 => phase"
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
        effect: none
    - lambda: |-
        id(phase) = 3;
#    - media_player.play_media:
#              media_url: 'http://homeassistant.local:8123/local/sounds/start.mp3'                
    - script.execute: reset_display    

  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;

  on_tts_start:
    - logger.log: "answering  4 => phase"
    - text_sensor.template.publish: 
        id: text_response
        state: !lambda return x;
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
        effect: none                     
    - lambda: |-
        id(phase) = 4;
    - script.execute: reset_display  
        
#  on_end:
#    - logger.log: "TTS playback finished, switching to waiting page"
#    - delay: 1sec
#    - lambda: id(phase) = 1;
       
             
  on_error:
    - logger.log: "ERROR!!!!!!!!!!!!!!!!"  
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
        effect: none
    - delay: 1s
    - lambda: id(phase) = 1;    
    - script.execute: reset_display

#    - lambda: |-
#        if (code == "wake-provider-missing" || code == "wake-engine-missing") {
#          id(use_wake_word).turn_off();
#        }




#########
# Scripts

script:
  - id: reset_display
    then:  
       - logger.log: "===> reset_display" 
       - lambda: |-
             if(id(phase) == 0)id(logo).execute();
             if(id(phase) == 1)id(waiting).execute();          
             if(id(phase) == 3)id(listening).execute();
             if(id(phase) == 4)id(answering).execute();

  - id: logo
    then:
       - logger.log: "===> logo"
       - lambda: |-
           id(myDisplay).show_page(logoP);
           id(myDisplay).update();         
           id(lightTO) = 0;
       - light.turn_on: screen_backlight   
       - delay: 10sec
       - lambda: id(phase) = 1;        
       - script.execute: reset_display       

  - id: waiting
    then:     
               - if:
                   condition:
                         voice_assistant.is_running:
                   then:
                      - delay: 1s  
                      - voice_assistant.stop:                                                               
               - micro_wake_word.start: 
               - logger.log: "===> wakeword"                      
               - lambda: |-
                   id(myDisplay).show_page(waitingP);
                   id(myDisplay).update();
                   id(lightTO) = 0;
               - light.turn_on: screen_backlight
          
                                                       
  - id: listening
    then: 
#       - delay: 2s      
       - logger.log: "===> listening"  
       - lambda: |-
            id(myDisplay).show_page(listeningP);  
            id(myDisplay).update();     
            id(lightTO) = 0;
       - light.turn_on: screen_backlight   
  
                                                                                        
  - id: answering
    then:
       - logger.log: "===> answering"  
       - lambda: |-
            id(myDisplay).show_page(answeringP);          
            id(myDisplay).update();          
            id(lightTO) = 0;
       - light.turn_on: screen_backlight       
       
                

      
      
                    
